setwd("~/Github")
rm(list=ls())
detach(datos)
datos=read.table('c_ccd.txt',header=T)
attach(datos)
modelo1 <- lm(rta ~ ., data=datos)
summary(modelo1)
modelo2 <- lm(rta ~ exp1 + exp3, data=datos)
summary(modelo2)
exp1x3 = exp1 * exp3
modelo3 <- lm(rta ~ exp1 + exp3 + exp1x3, data=datos)
summary(modelo3)
exp3Fitness = 1 * (exp3==2)
modelo4 <- lm(rta ~ exp1 + exp2 + exp3Fitness, data=datos)
summary(modelo4)
modelo5 <- lm(rta ~ exp1 + exp3Fitness, data=datos)
summary(modelo5)
rm(list=ls())
detach(datos)
datos=read.table('c_ccd.txt',header=T)
attach(datos)
exp3Fitness = 1 * (exp3==2)
model1 <- lm(rta ~ exp1 + exp2 + exp3Fitness, data=datos)
summary(model1)
install.packages("knitr")
rm(list=ls())
detach(datos)
datos=read.table('c_ccd.txt',header=T)
attach(datos)
exp3Fitness = 1 * (exp3==2)
model1 <- lm(rta ~ exp1 + exp2 + exp3Fitness, data=datos)
summary(model1)
install.packages("QuantPsyc")
library(QuantPsyc)
rm(list=ls())
detach(datos)
datos=read.table('c_ccd.txt',header=T)
attach(datos)
exp3Fitness = 1 * (exp3==2)
model1 <- lm(rta ~ exp1 + exp2 + exp3Fitness, data=datos)
summary(model1)
lm.beta(model1)
model2 <- lm(rta ~ exp1 + exp3Fitness, data=datos)
summary(model2)
lm.beta(model2)
model2 <- lm(rta ~ exp1 + exp3Fitness, data=datos)
summary(model2)
lm.beta(model2)
########## modelo 3
exp1x3 = exp1 * exp3
model3 <- lm(rta ~ exp1 + exp3 + exp1x3, data=datos)
summary(model3)
lm.beta(model3)
########## modelo 3
exp1x3 = exp1 * exp3Fitness
model3 <- lm(rta ~ exp1 + exp3Fitness + exp1x3, data=datos)
summary(model3)
lm.beta(model3)
model3 <- lm(rta ~  exp3Fitness +exp1+ exp1x3, data=datos)
summary(model3)
lm.beta(model3)
model3 <- lm(exp1 ~  exp3Fitness, data=datos)
summary(model3)
lm.beta(model3)
install.packages("lmtest")
library(lmtest)
dwtest(E1)# esta es la función de la prueba para autocorrelación
dwtest(model2)# esta es la función de la prueba para autocorrelación
######### Condiciones RL: Independencia
install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
install.packages("MASS")
########## Condiciones RL: Independencia
install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
install.packages("MASS")
#♣install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
plot(ajustados_2, abs(residuos_2), pch = 16, col = 'darkcyan',
xlab = 'V. explicativa', ylab = 'abs(Residuos)', main = 'Errores heterocedásticos')
lines(loess.smooth(ajustados_2, abs(residuos_2)), col = 'red3', lwd = 3, lty = 3)
#install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
plot(ajustados_2, abs(residuos_2), pch = 16, col = 'darkcyan',
xlab = 'V. explicativa', ylab = 'abs(Residuos)', main = 'homocedasticidad')
lines(loess.smooth(ajustados_2, abs(residuos_2)), col = 'red3', lwd = 3, lty = 3)
plot(ajustados_2, abs(residuos_2), pch = 16, col = 'darkcyan',
xlab = 'Peso en Kg', ylab = 'abs(Residuos)', main = 'homocedasticidad')
lines(loess.smooth(ajustados_2, abs(residuos_2)), col = 'red3', lwd = 3, lty = 3)
#install.packages("MASS")
ajustados_2 <- se.fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
par(mfrow = c(1,2))
plot(model2,1:1, main="Si existe homocedasticidad.
El error se mantiene constante",col.main="blue",cex.main=.9)
#install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
plot(ajustados_2, abs(residuos_2), pch = 16, col = 'darkcyan',
xlab = 'Peso en Kg', ylab = 'abs(Residuos)', main = 'homocedasticidad')
lines(loess.smooth(ajustados_2, abs(residuos_2)), col = 'red3', lwd = 3, lty = 3)
#install.packages("MASS")
ajustados_2 <- fitted(model2)
library(MASS)
residuos_2 <- stdres(model2)
plot(ajustados_2, abs(residuos_2), pch = 16, col = 'darkcyan',
xlab = 'Peso en Kg', ylab = 'abs(Residuos)', main = 'homocedasticidad')
lines(loess.smooth(ajustados_2, abs(residuos_2)), col = 'red3', lwd = 3, lty = 3)
library(lmtest)
bptest(model2)
qqnorm(model2, pch = 19, col = "gray50")
qqline(model2)
qqnorm(residuos_2)
qqline(residuos_2)
shapiro.test(residuos_2)
ks.test(residuos_2)
